#! /bin/sh
set -eo pipefail

# Wrapper for compilers which do not understand '-c -o'.
if [[ $GNU_BUILD_WRAPPER_DEBUG -eq 1 || -v COLOR_MAJOR ]]; then #if COLOR_MAJOR is set we want to include the wrapper so we can unset it otherwise would screw cmd output
	. "$(dirname "$(readlink -f "$0")")/wrapper_helper.sh" "$@"
fi

scriptversion=2025-02-03.05; # UTC

# Copyright (C) 1999-2025 Free Software Foundation, Inc.
# Written by Tom Tromey <tromey@cygnus.com>.
#
# This program is free software; you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation; either version 2, or (at your option)
# any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <https://www.gnu.org/licenses/>.

# As a special exception to the GNU General Public License, if you
# distribute this file as part of a program that contains a
# configuration script generated by Autoconf, you may include it under
# the same distribution terms that you use for the rest of that program.

# This file is maintained in Automake, please report
# bugs to <bug-automake@gnu.org> or send patches to
# <automake-patches@gnu.org>.

nl='
'

# We need space, tab and new line, in precisely that order.  Quoting is
# there to prevent tools from complaining about whitespace usage.
IFS=" ""	$nl"

file_conv=

# func_file_conv build_file unneeded_conversions
# Convert a $build file to $host form and store it in $file
# Currently only supports Windows hosts. If the determined conversion
# type is listed in (the comma separated) UNNEEDED_CONVERSIONS, no
# conversion will take place.
func_file_conv ()
{
  file=$1
  case $file in
    / | /[!/]*) # absolute file, and not a UNC file
      if test -z "$file_conv"; then
	# lazily determine how to convert abs files
        OS_SYS=`uname -o`
        if [[ "$OS_SYS" == "Msys" ]]; then
            file_conv=cygwin
        else
	case `uname -s` in
	  MINGW*)
	    if test -n "$MSYSTEM" && (cygpath --version) >/dev/null 2>&1; then
	      # MSYS2 environment.
	      file_conv=cygwin
	    else
	      # Original MinGW environment.
	      file_conv=mingw
	    fi
	    ;;
	  MSYS*)
	    # Old MSYS environment, or MSYS2 with 32-bit MSYS2 shell.
	    file_conv=cygwin
	    ;;
	  CYGWIN*)
	    # Cygwin environment.
	    file_conv=cygwin
	    ;;
	  *)
	    file_conv=wine
	    ;;
	esac
      fi
      fi
      case $file_conv/,$2, in
	*,$file_conv,*)
	  # This is the optimization mentioned above:
	  # If UNNEEDED_CONVERSIONS contains $file_conv, don't convert.
	  ;;
	mingw/*)
	  file=`cmd //C echo "$file " | sed -e 's/"\(.*\) " *$/\1/'`
	  ;;
	cygwin/*)
	  file=`cygpath -w "$file" || echo "$file"`
	  ;;
	wine/*)
	  file=`winepath -w "$file" || echo "$file"`
	  ;;
      esac
      ;;
  esac
}

# func_cl_dashL linkdir
# Make cl look for libraries in LINKDIR
func_cl_dashL ()
{
  func_file_conv "$1"
  if test -z "$lib_path"; then
    lib_path=$file
  else
    lib_path="$lib_path;$file"
  fi
  linker_opts="$linker_opts -LIBPATH:$file"
}

function GetLibNameIfInDir() {
	local lib=$1
	local dir=$2
	local dir_in_libpath=$3
	local shared=$4
	FULL_LIB_NAME=''

	local TRY_NAMES=("${lib}.lib" "${lib}lib.lib" "lib${lib}.a" "lib${lib}.lib" "${lib}")
	if $shared; then
		TRY_NAMES+="${lib}.dll.lib"; #prefer dynamic last
		#TRY_NAMES=("$lib.dll.lib" "${TRY_NAMES[@]}");
	else
		TRY_NAMES=("${lib}static.lib" "${lib}libstatic.lib" "${lib}-static.lib" "${lib}lib-static.lib" "${lib}_static.lib" "${lib}lib_static.lib" "${TRY_NAMES[@]}");
	fi
	for name in "${TRY_NAMES[@]}"; do
		if test -f "${dir}/${name}"; then
			if [ $dir_in_libpath -eq 1 ]; then
				FULL_LIB_NAME="$name"
			else
				FULL_LIB_NAME="${dir}/${name}"
			fi
			return 0;
		fi
	done
}

# func_cl_dashl library
# Do a library search-path lookup for cl
func_cl_dashl ()
{
	lib=$1
	found=no
	save_IFS=$IFS
	IFS=';'
	FULL_LIB_NAME='' #incase no lib_paths we need to set this so the previous lib doesn't get used in the next check
	for dir in $lib_path; do
		IFS=$save_IFS
		GetLibNameIfInDir "$lib" "$dir" 1 "$shared"
		if [ ! -z "$FULL_LIB_NAME" ]; then
			break
		fi
	done
	if [ -z "$FULL_LIB_NAME" ]; then
		IFS=';'
		for dir in $LIB; do
			IFS=$save_IFS
			#seems like we should be able to leave off LIB dirs as cl.exe will incldue them anyway
			GetLibNameIfInDir "$lib" "$dir" 1 "$shared"
			if [ ! -z "$FULL_LIB_NAME" ]; then
				break
			fi
		done
	fi
	if [ ! -z "$FULL_LIB_NAME" ]; then
		found=yes
		lib="$FULL_LIB_NAME"
	fi

  IFS=$save_IFS

  if test "$found" != yes; then
	if [[ "$lib" != *.lib ]]; then
    	lib="$lib.lib"
	fi	
  fi
}

# func_cl_wrapper cl arg...
# Adjust compile command to suit cl
func_cl_wrapper ()
{
  # Assume a capable shell
  lib_path=
  shared=:
  STD_DECLARE=""
  IS_GAS_CALL=0
  GAS_OUTPUT_FILE=""
  linker_opts=
  for arg
  do
    if test -n "$eat"; then
      eat=
    else
      case $1 in
	-o)
	  # configure might choose to run compile as 'compile cc -o foo foo.c'.
	  eat=1
	  case $2 in
	    *.o | *.lo | *.[oO][bB][jJ])
	      func_file_conv "$2"
	      set x "$@" -Fo${COLOR_MAJOR}"$file"${COLOR_NONE}
	      shift
	      ;;
	    *)
	      func_file_conv "$2"
	      set x "$@" -Fe${COLOR_MAJOR}"$file"${COLOR_NONE}
	      shift
	      ;;
	  esac
	  ;;
	-include)
		eat=1
	  	set x "$@" -FI${COLOR_MINOR}"$2"${COLOR_NONE}
	  	shift
		;;
	-x)
	  eat=1
	  LANG=$2
	  if [[ "$LANG" == "c" ]]; then
	  	LANG="-TC"
	  elif [[ "$LANG" == "c++" ]]; then
	  	LANG="-TP"
	  fi
	  set x "$@" "$LANG"
	  shift
	  ;;
	-I)
	  eat=1
	  func_file_conv "$2" mingw
	  set x "$@" -I"$file"
	  shift
	  ;;
	-I*)
	  func_file_conv "${1#-I}" mingw
	  set x "$@" -I"$file"
	  shift
	  ;;
	-l)
	  eat=1
	  func_cl_dashl "$2"
	  set x "$@" "$lib"
	  shift
	  ;;
	-l*)
	  func_cl_dashl "${1#-l}"
	  set x "$@" "$lib"
	  shift
	  ;;
	-L)
	  eat=1
	  func_cl_dashL "$2"
	  ;;
	-L*)
	  func_cl_dashL "${1#-L}"
	  ;;
	-static)
	  shared=false
	  ;;
	-std=*)
	  std="${1#-std=}"
	  if [[ "$std" == "c99" ]]; then
	  	std="c11"
	  fi
	  set x "$@" -std:"$std"
	  if [[ "$std" == "c11" || "$std" == "c17" ]]; then #note that MSVC never supported dynamic arrays as it never supported c99 fully and c11 made them optional.  If your configure has a dynamic array test it will fail still.
			STD_DECLARE="/Zc:__STDC__"
	  fi
	  shift
	  ;;
	-[Ff][pP][iI][cC] | -[Ff][Nn][Oo]-[Pp][Ii][Cc])
	  ;;
	-W[a-zA-Z][a-zA-Z-][a-zA-Z-][a-zA-Z-][a-zA-Z-]*) #word based warnings other than all are not supported by msvc
	  ;;
	-Wl,*)
	  arg=${1#-Wl,}
	  save_ifs="$IFS"; IFS=','
	  for flag in $arg; do
	    IFS="$save_ifs"
	    linker_opts="$linker_opts $flag"
	  done
	  IFS="$save_ifs"
	  ;;
	-Xlinker)
	  eat=1
	  linker_opts="$linker_opts $2"
	  ;;
	-version | --version)
	  echo "MSVC CL" `cl 2>&1 1>/dev/null | grep -o -E "[0-9]+[.][0-9.]+"`
	  exit
	  ;;
	-*)
	  set x "$@" "$1"
	  shift
	  ;;
	*.cc | *.CC | *.cxx | *.CXX | *.[cC]++ | *.S)
	  func_file_conv "$1"
	  set x "$@" -Tp "$file"
	  shift
	  ;;
	*.s)
	  IS_GAS_CALL=1
	  GAS_OUTPUT_FILE="$1"
	  set x "$@" "$1"
	  GAS_OUTPUT_FILE=`echo "$GAS_OUTPUT_FILE" | sed 's|^.*[\\/]||; s|^[a-zA-Z]:||; s/\.s$/.obj/'`
      shift
	  ;;
	*.a)
	  linker_opts="$linker_opts $1"
	  ;;
	*.c | *.cpp | *.CPP | *.lib | *.LIB | *.Lib | *.OBJ | *.obj | *.[oO])
	  func_file_conv "$1" mingw
	  set x "$@" "${COLOR_MINOR2}$file${COLOR_NONE}"
	  shift
	  ;;
	*)
	  set x "$@" "$1"
	  shift
	  ;;
      esac
    fi
    shift
  done
  if test -n "$linker_opts"; then
    linker_opts="-link$linker_opts"
  fi
  if [[ $IS_GAS_CALL -eq 1 && "$AS" ]]; then
	shift
	local FINAL_ARR=("$AS")
	for VAL in "$@"; do
		case $VAL in
				"-nologo")
				;;
				\/*) #strip slash commands
				;;
				-D*) #any defines
				;;
				*)
					FINAL_ARR+=($VAL)
				;;
			esac
	done
	FINAL_ARR+=("-o" $GAS_OUTPUT_FILE)
	set -- "${FINAL_ARR[@]}"
  fi
  if [[ $GNU_BUILD_WRAPPER_DEBUG -eq 1 ]]; then
  	wrapper_exec "$@" $STD_DECLARE $linker_opts
  else
		exec "$@" $STD_DECLARE $linker_opts
  fi

}

eat=

case $1 in
  '')
     echo "$0: No command.  Try '$0 --help' for more information." 1>&2
     exit 1;
     ;;
  -h | --h*)
    cat <<\EOF
Usage: compile [--help] [--version] PROGRAM [ARGS]

Wrapper for compilers which do not understand '-c -o'.
Remove '-o dest.o' from ARGS, run PROGRAM with the remaining
arguments, and rename the output as expected.

If you are trying to build a whole package this is not the
right script to run: please start by reading the file 'INSTALL'.

Report bugs to <bug-automake@gnu.org>.
GNU Automake home page: <https://www.gnu.org/software/automake/>.
General help using GNU software: <https://www.gnu.org/gethelp/>.
EOF
    exit $?
    ;;
  -v | --v*)
    echo "compile (GNU Automake) $scriptversion"
    exit $?
    ;;
  cl | *[/\\]cl | cl.exe | *[/\\]cl.exe | \
  clang-cl | *[/\\]clang-cl | clang-cl.exe | *[/\\]clang-cl.exe | \
  icl | *[/\\]icl | icl.exe | *[/\\]icl.exe )
    func_cl_wrapper "$@"      # Doesn't return...
    ;;
esac

ofile=
cfile=

for arg
do
  if test -n "$eat"; then
    eat=
  else
    case $1 in
      -o)
	# configure might choose to run compile as 'compile cc -o foo foo.c'.
	# So we strip '-o arg' only if arg is an object.
	eat=1
	case $2 in
	  *.o | *.obj)
	    ofile=$2
	    ;;
	  *)
	    set x "$@" -o "$2"
	    shift
	    ;;
	esac
	;;
      *.c)
	cfile=$1
	set x "$@" "$1"
	shift
	;;
      *)
	set x "$@" "$1"
	shift
	;;
    esac
  fi
  shift
done

if test -z "$ofile" || test -z "$cfile"; then
  # If no '-o' option was seen then we might have been invoked from a
  # pattern rule where we don't need one.  That is ok -- this is a
  # normal compilation that the losing compiler can handle.  If no
  # '.c' file was seen then we are probably linking.  That is also
  # ok.
  exec "$@"
fi

# Name of file we expect compiler to create.
cofile=`echo "$cfile" | sed 's|^.*[\\/]||; s|^[a-zA-Z]:||; s/\.c$/.o/'`

# Create the lock directory.
# Note: use '[/\\:.-]' here to ensure that we don't use the same name
# that we are using for the .o file.  Also, base the name on the expected
# object file name, since that is what matters with a parallel build.
lockdir=`echo "$cofile" | sed -e 's|[/\\:.-]|_|g'`.d
while true; do
  if mkdir "$lockdir" >/dev/null 2>&1; then
    break
  fi
  sleep 1
done
# FIXME: race condition here if user kills between mkdir and trap.
trap "rmdir '$lockdir'; exit 1" 1 2 15

# Run the compile.
"$@"
ret=$?

if test -f "$cofile"; then
  test "$cofile" = "$ofile" || mv "$cofile" "$ofile"
elif test -f "${cofile}bj"; then
  test "${cofile}bj" = "$ofile" || mv "${cofile}bj" "$ofile"
fi

rmdir "$lockdir"
exit $ret

# Local Variables:
# mode: shell-script
# sh-indentation: 2
# eval: (add-hook 'before-save-hook 'time-stamp nil t)
# time-stamp-start: "scriptversion="
# time-stamp-format: "%:y-%02m-%02d.%02H"
# time-stamp-time-zone: "UTC0"
# time-stamp-end: "; # UTC"
# End:
